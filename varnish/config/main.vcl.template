vcl 4.1;

import directors;

# Define a shared probe for Docker registry backends
#probe docker_probe {
#    .url = "/v2/";
#    .timeout = 5s;
#    .interval = 10s;
#    .window = 5;
#    .threshold = 3;
#}

# Define backends for registry-1.docker.io
backend docker_registry_backend_1 {
    .host = "54.198.86.24";
    .port = "443";
#    .probe = docker_probe;
}

backend docker_registry_backend_2 {
    .host = "54.236.113.205";
    .port = "443";
#    .probe = docker_probe;
}

backend docker_registry_backend_3 {
    .host = "54.227.20.253";
    .port = "443";
#    .probe = docker_probe;
}

# Define a backend for Tinyproxy
#backend tinyproxy_backend {
#    .host = "__TINYPROXY_IP__";
#    .port = "8888";
#}

# Initialize the round-robin director for Docker registry
sub vcl_init {
    new docker_director = directors.round_robin();
    docker_director.add_backend(docker_registry_backend_1);
    docker_director.add_backend(docker_registry_backend_2);
    docker_director.add_backend(docker_registry_backend_3);
}

sub vcl_recv {
    # Handle requests to registry-1.docker.io
    if (req.http.host == "registry-1.docker.io") {
        set req.backend_hint = docker_director.backend();

        # Cache only OCI image layers (blobs)
        if (req.url ~ "^/v2/.*/blobs/sha256") {
            return (hash);  # Cache image layers
        } else {
            return (pass);  # Don't cache other requests, like manifests
        }
    }

    # For all other requests, forward to Tinyproxy
    #set req.backend_hint = tinyproxy_backend;
    return (pass);
}

sub vcl_backend_fetch {
    # If not Docker registry, forward the request through Tinyproxy
    if (bereq.http.host != "registry-1.docker.io") {
        # Let Tinyproxy handle the backend resolution
        set bereq.http.Host = bereq.http.host;
    }
}

sub vcl_backend_response {
    if (bereq.http.host == "registry-1.docker.io" && bereq.url ~ "^/v2/.*/blobs/sha256") {
        # Allow caching for Docker image layers
        set beresp.ttl = 120s;  # Set TTL for image layers
    } else {
        # Don't cache any other responses
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
    }
}

sub vcl_deliver {
    # Optionally, add headers to show whether the response was served from cache
    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
}
