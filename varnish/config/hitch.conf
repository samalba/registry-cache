# Example configuration file for hitch(8).
#
# NOTE: all config file parameters can be overriden
#       from command line!

# Listening address. REQUIRED.
# Can be specified multiple times for multiple listen endpoints.
frontend = {
    host = "*"
    port = "8443"
}

# Upstream server address. REQUIRED.
#
# type: string
# syntax: [HOST]:PORT.
backend = "[varnish]:8080"

# SSL x509 certificate file. REQUIRED.
# List multiple certs to use SNI. Certs are used in the order they
# are listed; the last cert listed will be used if none of the others match.
# Specify additional "pem-file" lines per certificate to use.
#
# type: string
pem-file = "/etc/hitch/testcert.pem"

# OCSP settings
#
# Directory where Hitch will store and read OCSP responses for
# stapling. Directory must be readable and writable for the configured
# hitch user. Setting this option enables automatic retrieval and
# updating of OCSP responses.
#
ocsp-dir = "/var/lib/hitch-ocsp"

# Timeout for fetching an OCSP response from a responder (in seconds)
# ocsp-resp-tmo = 10;

# Timeout for connecting to an OCSP responder (in seconds)
# ocsp-connect-tmo = 4;

# Verification of OCSP responses
# ocsp-verify-staple = off

# List of allowed cipher TLS suites (TLSv1.3 only)
#
# type: string
ciphersuites = "TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256"

# List of allowed TLS ciphers.
# Matches Mozilla's intermediate compatibility mode for server-side TLS
# See https://wiki.mozilla.org/Security/Server_Side_TLS#Intermediate_compatibility_.28recommended.29
# Last update: 2020/08/24
#
# type: string
ciphers = "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"

# Enforce server cipher list order
#
# type: boolean
prefer-server-ciphers = off

# The SSL/TLS protocols to be used
#
# type: string
tls-protos = TLSv1.2 TLSv1.3

# Enable to let clients negotiate HTTP/2 with ALPN
# Use HTTP/1.1 as a fallback
# type: string
alpn-protos = "h2, http/1.1"

# Number of worker processes
#
# type: integer
workers = 4

# Listen backlog size
#
# type: integer
backlog = 100

# TCP socket keepalive interval in seconds
#
# type: integer
keepalive = 3600

# Chroot directory
#
# type: string
chroot = ""

# Set uid after binding a socket
#
# type: string
user = "hitch"

# Set gid after binding a socket
#
# type: string
group = "hitch"

# Quiet execution, report only error messages
# This setting is deprecated in favor of log-level.
#
# type: boolean
# quiet = on

# Use syslog for logging
#
# type: boolean
syslog = on

# Log chattiness. 0=silence, 1=errors, 2=info/debug.
#
# type: integer
# log-level = 1

# Syslog facility to use
#
# type: string
syslog-facility = "daemon"

# Run as daemon
#
# type: boolean
daemon = off

# Report client address by writing IP before sending data
#
# NOTE: This option is mutually exclusive with option write-proxy-v2, write-proxy and proxy-proxy.
#
# type: boolean
write-ip = off

# Report client address using SENDPROXY protocol, see
# http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt
# for details.
#
# NOTE: This option is mutually exclusive with option write-proxy-v2, write-ip and proxy-proxy.
#
# type: boolean
write-proxy-v1 = off

# Report client address using SENDPROXY v2 binary protocol, see
# http://haproxy.1wt.eu/download/1.5/doc/proxy-protocol.txt
# for details.
#
# NOTE: This option is mutually exclusive with option write-ip, write-proxy-v1 and proxy-proxy.
#
# type: boolean
write-proxy-v2 = off

# Proxy an existing SENDPROXY protocol header through this request.
#
# NOTE: This option is mutually exclusive with option write-proxy-v2, write-ip and write-proxy-v1.
#
# type: boolean
proxy-proxy = off

# Abort handshake when the client submits an unrecognized SNI server name.
#
# type: boolean
sni-nomatch-abort = off
